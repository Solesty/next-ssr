{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport data from './data/data.json'; // initial state\n\nconst startState = {\n  cards: []\n}; // Actions\n\nexport const initialCards = () => {\n  console.log(\"initialCards\");\n  return {\n    type: 'INITIAL_CARDS',\n    cards: data\n  };\n};\nexport const addItem = item => {\n  return {\n    type: 'ADD_ITEM',\n    item\n  };\n}; // Reducers\n\nexport const reducer = (state = startState, action) => {\n  switch (action.type) {\n    case 'INITIAL_CARDS':\n      return {\n        cards: action.cards\n      };\n\n    case 'ADD_ITEM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cards: _objectSpread(_objectSpread({}, state), {}, {\n          item: action.item\n        })\n      });\n\n    default:\n      return state;\n  }\n}; // create store\n\nexport const initStore = (initialState = startState) => {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n};","map":{"version":3,"sources":["/home/adeleke/Documents/Trainings/LinkedIn/React Server Side Rendering/ssr/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","data","startState","cards","initialCards","console","log","type","addItem","item","reducer","state","action","initStore","initialState"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,IAAP,MAAiB,kBAAjB,C,CAEA;;AACA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE;AADQ,CAAnB,C,CAIA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SAAO;AACHC,IAAAA,IAAI,EAAE,eADH;AAEHJ,IAAAA,KAAK,EAAEF;AAFJ,GAAP;AAIH,CANM;AAQP,OAAO,MAAMO,OAAO,GAAIC,IAAD,IAAU;AAC7B,SAAO;AACHF,IAAAA,IAAI,EAAE,UADH;AAEHE,IAAAA;AAFG,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGT,UAAT,EAAqBU,MAArB,KAAgC;AACnD,UAAQA,MAAM,CAACL,IAAf;AACI,SAAK,eAAL;AACI,aAAO;AAAEJ,QAAAA,KAAK,EAAES,MAAM,CAACT;AAAhB,OAAP;;AACJ,SAAK,UAAL;AACI,6CAAYQ,KAAZ;AAAmBR,QAAAA,KAAK,kCAAOQ,KAAP;AAAcF,UAAAA,IAAI,EAAEG,MAAM,CAACH;AAA3B;AAAxB;;AACJ;AACI,aAAOE,KAAP;AANR;AAQH,CATM,C,CAWP;;AACA,OAAO,MAAME,SAAS,GAAG,CAACC,YAAY,GAAGZ,UAAhB,KAA+B;AACpD,SAAOL,WAAW,CAACa,OAAD,EAAUI,YAAV,EAAwBf,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAA3C,CAAlB;AACH,CAFM","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\nimport data from './data/data.json'\n\n// initial state\nconst startState = {\n    cards: []\n}\n\n// Actions\nexport const initialCards = () => {\n    console.log(\"initialCards\")\n    return {\n        type: 'INITIAL_CARDS',\n        cards: data\n    }\n}\n\nexport const addItem = (item) => {\n    return {\n        type: 'ADD_ITEM',\n        item\n    }\n}\n\n// Reducers\nexport const reducer = (state = startState, action) => {\n    switch (action.type) {\n        case 'INITIAL_CARDS':\n            return { cards: action.cards }\n        case 'ADD_ITEM':\n            return { ...state, cards: { ...state, item: action.item } }\n        default:\n            return state\n    }\n}\n\n// create store\nexport const initStore = (initialState = startState) => {\n    return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n}"]},"metadata":{},"sourceType":"module"}