{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport data from './data/data.json'; // initial state\n\nconst startState = {\n  cards: []\n}; // Actions\n\nexport const initialCards = () => {\n  console.log(\"initialCards\");\n  return {\n    type: 'INITIAL_CARDS',\n    cards: data\n  };\n};\nexport const addItem = item => {\n  return {\n    type: 'ADD_ITEM',\n    item\n  };\n}; // Reducers\n\nexport const reducer = (state = startState, action) => {\n  switch (action.type) {\n    case 'INITIAL_CARDS':\n      return {\n        cards: action.cards\n      };\n\n    case 'ADD_ITEM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cards: _objectSpread(_objectSpread({}, state), {}, {\n          item: action.item\n        })\n      });\n\n    default:\n      return state;\n  }\n}; // create store\n\nexport const initStore = (initialState = startState) => {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n};","map":null,"metadata":{},"sourceType":"module"}